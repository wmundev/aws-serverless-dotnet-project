AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Sample SAM Template for HelloWorld

Parameters:
  StageName:
    Type: String
    Default: Prod

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 29

Resources:
#  S3Bucket:
#    Type: 'AWS::S3::Bucket'
#    DeletionPolicy: Delete
#    Properties:
#      BucketName: e0965cd2-e0f9-422b-8972-f418e273a325
#      PublicAccessBlockConfiguration:
#        BlockPublicAcls: true
#        BlockPublicPolicy: true
#        IgnorePublicAcls: true
#        RestrictPublicBuckets: true
        

  HttpApiSample:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: !Ref StageName
      Tags:
        Name: "hello-api"
      AccessLogSettings:
        DestinationArn: !GetAtt AccessLogs.Arn
        Format: $context.requestId
      DefaultRouteSettings:
        ThrottlingBurstLimit: 200
      FailOnWarnings: True

  AccessLogs:
    Type: AWS::Logs::LogGroup

  MySqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      ReceiveMessageWaitTimeSeconds: 20

  HelloWorldFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ./src/HelloWorld/
      Handler: HelloWorld::HelloWorld.Function::FunctionHandler
      Runtime: dotnetcore3.1
      MemorySize: 256
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          SqsQueueArn: !GetAtt MySqsQueue.Arn
      Events:
        HelloWorld:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            ApiId: !Ref HttpApiSample
            Path: /hello
            Method: get

  ApiTestFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ./src/ApiTest/
      Handler: ApiTest::ApiTest.Function::FunctionHandler
      Runtime: dotnetcore3.1
      MemorySize: 256
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          SqsQueueArn: !GetAtt MySqsQueue.Arn
      Events:
        ApiTestEvent:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            ApiId: !Ref HttpApiSample
            Path: /hellofriend
            Method: get

  MFAGenerateFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ./src/MFAGenerate/
      Handler: MFAGenerate::MFAGenerate.Function::FunctionHandler
      Runtime: dotnetcore3.1
      MemorySize: 256
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          SqsQueueArn: !GetAtt MySqsQueue.Arn
      Events:
        MFAGenerateEvent:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            ApiId: !Ref HttpApiSample
            Path: /mfa/generate
            Method: get

  GenerateSecurePasswordFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ./src/GenerateSecurePassword/
      Handler: GenerateSecurePassword::GenerateSecurePassword.Function::FunctionHandler
      Runtime: dotnetcore3.1
      MemorySize: 256
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          SqsQueueArn: !GetAtt MySqsQueue.Arn
      Events:
        GenerateSecurePasswordEvent:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            ApiId: !Ref HttpApiSample
            Path: /password/generate
            Method: get

  RecipeNotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/RecipeNotification/
      Handler: RecipeNotification::RecipeNotification.Function::FunctionHandler
      Runtime: dotnetcore3.1
      MemorySize: 256
      Policies:
        # Give DynamoDB Full Access to your Lambda Function
        - AmazonDynamoDBFullAccess
      Environment: 
        Variables:
#          ElasticSearchEndpoint: !GetAtt ElasticsearchDomain.DomainEndpoint
          ElasticSearchEndpoint: 'localhost:9200'
          TableName: !Ref myDynamoDBTable
#      Events:
#        RecipeSchedule:
#          Type: Schedule 
#          Properties:
#            Enabled: true
#            Name: RecipeSchedule
#            Schedule: "cron(0 12 * * ? *)"

  SendEmailCodeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/SendEmailCode/
      Handler: SendEmailCode::SendEmailCode.Function::FunctionHandler
      Runtime: dotnetcore3.1
      MemorySize: 256
      Timeout: 25
      Policies:
        # Give DynamoDB Full Access to your Lambda Function
        - AmazonDynamoDBFullAccess
      Environment:
        Variables:
          TableName: !Ref myDynamoDBTable
      Events:
        SendEmailCode:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            ApiId: !Ref HttpApiSample
            Path: /code
            Method: post

  CheckCodeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/CheckCodeFunction/
      Handler: CheckCodeFunction::CheckCodeFunction.Function::FunctionHandler
      Runtime: dotnetcore3.1
      MemorySize: 256
      Timeout: 25
      Policies:
        # Give DynamoDB Full Access to your Lambda Function
        - AmazonDynamoDBFullAccess
      Environment:
        Variables:
          TableName: !Ref myDynamoDBTable
      Events:
        CheckCodeFunction:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            ApiId: !Ref HttpApiSample
            Path: /code
            Method: get

  myDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "Id"
          AttributeType: "N"
      KeySchema:
        - AttributeName: "Id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
      TableName: "EmailCode"
      
#  myDynamoDBTable:
#    Type: AWS::DynamoDB::Table
#    Properties:
#      AttributeDefinitions:
#        - AttributeName: "Album"
#          AttributeType: "S"
#        - AttributeName: "Artist"
#          AttributeType: "S"
##        - AttributeName: "Sales"
##          AttributeType: "N"
##        - AttributeName: "NumberOfSongs"
##          AttributeType: "N"
#      KeySchema:
#        - AttributeName: "Album"
#          KeyType: "HASH"
#        - AttributeName: "Artist"
#          KeyType: "RANGE"
#      ProvisionedThroughput:
#        ReadCapacityUnits: "1"
#        WriteCapacityUnits: "1"
#      TableName: "TestTableName"

#  ElasticsearchDomain:
#    Type: AWS::Elasticsearch::Domain
#    Properties:
#      DomainName: 'test'
#      ElasticsearchVersion: '7.10'
#      ElasticsearchClusterConfig:
#        DedicatedMasterEnabled: false
#        InstanceCount: '1'
#        ZoneAwarenessEnabled: false
#        InstanceType: 't3.small.elasticsearch'
##        DedicatedMasterType: 'm3.medium.elasticsearch'
##        DedicatedMasterCount: '3'
#      EBSOptions:
#        EBSEnabled: true
#        Iops: '0'
#        VolumeSize: '10'
#        VolumeType: 'gp2'
#      AccessPolicies:
#        Version: '2012-10-17'
#        Statement:
#          - Effect: 'Allow'
#            Principal:
#              AWS: !Join [':',['arn:aws:iam:', !Ref AWS::AccountId, 'root']]
##              AWS: !GetAtt RecipeNotificationFunctionRole.Arn
#            Action: 'es:*'
#            Resource: !Join [':',["arn:aws:es", !Ref AWS::Region, !Ref AWS::AccountId, "domain/test/*" ]]            
#          - Effect: 'Allow'
#            Principal:
#              AWS: '*'
#            Action: 'es:*'
#            Resource: !Join [':',["arn:aws:es", !Ref AWS::Region, !Ref AWS::AccountId, "domain/test/*" ]]
#            Condition:
#              IpAddress:
#                'aws:SourceIp':
#                  - 2.2.2.2/32
##      LogPublishingOptions:
##        ES_APPLICATION_LOGS:
##          CloudWatchLogsLogGroupArn: 'arn:aws:logs:us-east-1:123456789012:log-group:/aws/aes/domains/es-application-logs'
##          Enabled: true
##        SEARCH_SLOW_LOGS:
##          CloudWatchLogsLogGroupArn: 'arn:aws:logs:us-east-1:123456789012:log-group:/aws/aes/domains/es-slow-logs'
##          Enabled: true
##        INDEX_SLOW_LOGS:
##          CloudWatchLogsLogGroupArn: 'arn:aws:logs:us-east-1:123456789012:log-group:/aws/aes/domains/es-index-slow-logs'
##          Enabled: true
#      AdvancedOptions:
#        rest.action.multi.allow_explicit_index: true

Outputs:
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldApi:
    Description: "API Gateway endpoint base URL for Prod stage"
    Value: !Sub "https://${HttpApiSample}.execute-api.${AWS::Region}.amazonaws.com/Prod"
  HelloWorldFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt HelloWorldFunctionRole.Arn
